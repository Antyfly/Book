Тема: Объектно-ориентированное программирование (ООП)

ООП — методология, основанная на представлении программы в виде совокупности объектов. Объекты входят в классы, а классы образуют иерархию объектов.

Класс— структура данных, формируется программистом. Класс состоит из полей (переменных) и методов (функций).

Объект — экземпляр класса, у которого полям присвоены какие-то значения.

Основные принципы ООП:

Абстракция — у объекта есть «интерфейс». Применяется для выделения важного для решения задач, контекстное понимание предмета, формируемое в виде класса.

Наследование — способность к копированию. 

Полиморфизм — единый язык общения. Применяется  для определения точки, в которой единое управление лучше распараллелить или наоборот — собрать воедино.

Инкапсуляция —объект независим. Применяется для быстрой и безопасной организации собственно иерархической управляемости: чтобы было достаточно простой команды «что делать», без одновременного уточнения как именно делать, так как это уже другой уровень управления.

Особенности реализации ООП:

Поля данных — параметры объекта, задающие его состояние (свойства).

Методы — процедуры и функции, связанные с классом.

Инкапсуляция обеспечивается след. Средствами:

Контроль доступа— методы класса м.б. как чисто внутренними, так и внешними и необходимо обеспечить скрытость первых при доступности извне вторых. Public, private, protected. 

Методы доступа — поля класса в общем случае не должны быть доступны извне, поскольку такой доступ позволил бы произвольным образом менять внутреннее состояние объектов.

Полиморфизм реализуется путем введения в язык правил, согласно которым переменной типа «класс» м.б. присвоен объект любого класса— потомка ее класса.

ООП — методологии:
	• Компонентное программирование— своеобразная «настройка» над ООП;
	• Прототипное программирование—сохранив часть черт ООП, отказалось от базовых понятий—класса и наследования;
	• Классо—ориентированное программирование.

Плюсы: 
	1. Визуально код проще и его легче читать.
	2. Меньше одинакового кода.
	3. Сложные программы пишутся проще.
	4. Скорость написания увеличивается.
	
Минусы:
	1. Сложно понять и начать работать.
	2. Иногда производительность кода будет ниже.
	3. Больше памяти нужно.